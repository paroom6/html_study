// 함수란?
//클라이언트 -> 서버 요청 -> 서버의 응답 -> 클라이언트 
//무엇을 할 것인가를 생각하고 함수를 제작

//스택 위에서 하나씩 쌓아나가는 형식 + 위에서 부터 출력
// /* 메모리 스택 - 입력() 거꿀로 쌓이게 된다.
클라이언트_화면_출력();//함수 호출
function 클라이언트_화면_출력() { //함수 정의 : 정의되어야지만 사용가능 - 호이스팅으로 아래 정의하여도 사용가능
    //html 화면 + js를 통한 기능들
    //메모리의 주소는 항상 먼저 할당된다.
    //함수 안의 함수도 호출된 순간스택
    let a = 클라이언트_데이터_입력(10);//2번호출 - 메모리에 2개 등록 기능종료 후 메모리에서 내려간다. 
    let b = 클라이언트_데이터_입력(20);
    let result = a + b; //스택 가장 아래 담길 것 + a,b 변수 a + b 라는 기능

    let 요청데이터 = {
        데이터1 : a,
        데이터2 : b
    }//객체라는 틀로 묶어서 규격화 시킨다.

    const test = () => {//함수 안에 함수 정의가능 하지만 하지않는 것을 추천 - 코드 가독성이 떨어진다.
        //익명함수를 사용해서 상수에 담는것을 추천
        let c = 30;
        return 요청데이터;//지역함수 : 필요한 객체를 바로 사용가능한 것이 장점
    }
    클라이언트_데이터_삽입_요청_버튼_클릭(요청데이터);//function도 입력 가능: 함수의 결과값이 아닌 함수의 정의를 전달한다.
    클라이언트_데이터_삽입_요청_버튼_클릭(test());//function도 입력 가능: 함수의 결과값이 아닌 함수의 정의를 전달한다.
}

// interface student { //객체의 자료형 선언 - 타입스크립트
    // num: Number;
    // name: String;
// }

//input 
function 클라이언트_데이터_입력(데이터) {//매개변수: 항상 같은 값이 아닌 필요한 값을 연산하게 도와준다, any 어떤 값이 들어오든 매개변수로 활용가눙; 
    //함수명(변수명: 타입): 타입 - 타입스크립트: 매개변수의 자료형과 리턴 값의 자료형이 고정된다. 두개 이상의 매개변수ㄷ 빋을 수 있다.
    console.log(데이터);
    //비어있는 리턴 - 함수의 정지,탈출 리턴 자료형이 없다
    //리턴자료형이 있는 리턴 - 값을 받아온다 -호출된 함수 자체가 값이 된다.
    return 데이터; 
}
// 클라리언트_화면_출력 - */ 
function 클라이언트_데이터_삽입_요청_버튼_클릭(요청데이터) {
    백엔드_데이터_삽입_요청(요청데이터);
}

function 백엔드_데이터_삽입_요청(요청데이터) {
    console.log(요청데이터);
    console.log("요청");
}